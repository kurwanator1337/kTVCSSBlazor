@page "/teams"
@using kTVCSSBlazor.Data
@using kTVCSSBlazor.Db.Models;
@using kTVCSSBlazor.Db.Models.Players
@using kTVCSSBlazor.Db.Models.Teams
@inject Db.Interfaces.ITeams repo
@inject IJSRuntime JS
@inject kTVCSSAuthenticationStateProvider kTVCSSAuthenticationStateProvider

<PageTitle>kTVCSS @@ Команды</PageTitle>

<kTVCSSBlazor.Components.Layout.Bar />

<MudDataGrid T=Team Items="@dataSource" SortMode=SortMode.None Hover="true" Filterable=false QuickFilter=QuickFilter Virtualize="true" Height="81svh">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Все команды</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Position" Title="" CellStyle="margin-left: 0;width: 5px" />
        <TemplateColumn Title="" CellStyle="margin-left: 0;width: 15px" Filterable="false">
            <CellTemplate>
                <img style="display: flex;justify-content: center;width: 28px;" src="@context.Item.AvatarUrl" />
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Команда">
            <CellTemplate>
                <MudLink Color="Color.Inherit" Href="@GetTeamLink(context.Item.Id)">@context.Item.Name</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.MatchesPlayed" Title="Сыграно" />
            <PropertyColumn Property="x => x.MatchesWins" Title="Победы" />
            <PropertyColumn Property="x => x.MatchesLosts" Title="Поражения" />
            <PropertyColumn Property="x => x.Rating" Title="Рейтинг" />
            <PropertyColumn Property="x => x.PlayersCount" Title="Игроков" />
        </Columns>
    </MudDataGrid>

    @code {
    private List<Team> dataSource = new List<Team>();
    private string _searchString;

    private string GetTeamLink(int id)
    {
        return $"/team/{id}";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            JS.InvokeVoidAsync("showLoadBar");
            dataSource.AddRange(repo.Get());
            JS.InvokeVoidAsync("hideLoadBar");
        }
        base.OnAfterRender(firstRender);
    }

    private Func<Team, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
